-- 创建 New_user 表
CREATE TABLE IF NOT EXISTS public."New_user" (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    gender VARCHAR(10),
    age INT,
    phone VARCHAR(20),
    direction VARCHAR(50),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc'::text, NOW()) NOT NULL
);

-- 为 New_user 表启用行级安全
ALTER TABLE public."New_user" ENABLE ROW LEVEL SECURITY;

-- 创建策略允许匿名用户读取 New_user 表的数据
CREATE POLICY "Allow anon read access to New_user" ON public."New_user"
FOR SELECT
TO anon
USING (true);

CREATE POLICY "Allow anon insert access to New_user" ON public."New_user"
FOR INSERT
TO anon
WITH CHECK (true);

CREATE POLICY "Allow anon update access to New_user" ON public."New_user"
FOR UPDATE
TO anon
USING (true)
WITH CHECK (true);

CREATE POLICY "Allow anon delete access to New_user" ON public."New_user"
FOR DELETE
TO anon
USING (true);

-- 创建 user_profiles 表
CREATE TABLE IF NOT EXISTS public.user_profiles (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id BIGINT NOT NULL UNIQUE REFERENCES public."New_user"(id) ON DELETE CASCADE,
    date_of_birth DATE,
    address TEXT,
    diseases TEXT,
    medical_history TEXT,
    conditioning_reason TEXT,
    height NUMERIC(5, 1),
    weight NUMERIC(5, 1),
    medication_status TEXT,
    conditioning_content TEXT[],
    systolic_pressure INT,
    diastolic_pressure INT,
    fasting_blood_sugar NUMERIC(9, 2),
    glycated_hemoglobin NUMERIC(9, 2),
    self_management_status TEXT,
    payment_status TEXT,
    estimated_time TEXT,
    other_notes TEXT,
    filler_name VARCHAR(100),
    client_source VARCHAR(100),
    scheduled_time TIMESTAMP WITH TIME ZONE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc'::text, NOW()) NOT NULL,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc'::text, NOW()) NOT NULL
);

-- 为 user_profiles 表启用行级安全
ALTER TABLE public.user_profiles ENABLE ROW LEVEL SECURITY;

-- 创建策略允许匿名用户对 user_profiles 表进行所有操作
CREATE POLICY "Allow anon full access to user_profiles" ON public.user_profiles
FOR ALL TO anon
USING (true)
WITH CHECK (true);

-- 创建一个函数，用于在行更新时自动设置 updated_at 时间戳
CREATE OR REPLACE FUNCTION public.handle_updated_at()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- 为 user_profiles 表创建一个触发器，在每次更新前调用上述函数
DROP TRIGGER IF EXISTS on_profile_update ON public.user_profiles;
CREATE TRIGGER on_profile_update
BEFORE UPDATE ON public.user_profiles
FOR EACH ROW
EXECUTE PROCEDURE public.handle_updated_at(); 